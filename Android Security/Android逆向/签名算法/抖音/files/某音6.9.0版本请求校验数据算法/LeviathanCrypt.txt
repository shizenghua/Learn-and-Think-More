import java.security.MessageDigest;
import java.util.Random;


public class LeviathanCrypt {

	/**生成加密数据的key相关*/
	private static final int[] ENCODE_KEY_SWAP_TABLE = {
			0x0,
			0x4C11DB7,
			0x9823B6E,
			0xD4326D9,
			0x130476DC,
			0x17C56B6B,
			0x1A864DB2,
			0x1E475005,
			0x2608EDB8,
			0x22C9F00F,
			0x2F8AD6D6,
			0x2B4BCB61,
			0x350C9B64,
			0x31CD86D3,
			0x3C8EA00A,
			0x384FBDBD,
			0x4C11DB70,
			0x48D0C6C7,
			0x4593E01E,
			0x4152FDA9,
			0x5F15ADAC,
			0x5BD4B01B,
			0x569796C2,
			0x52568B75,
			0x6A1936C8,
			0x6ED82B7F,
			0x639B0DA6,
			0x675A1011,
			0x791D4014,
			0x7DDC5DA3,
			0x709F7B7A,
			0x745E66CD,
			0x9823B6E0,
			0x9CE2AB57,
			0x91A18D8E,
			0x95609039,
			0x8B27C03C,
			0x8FE6DD8B,
			0x82A5FB52,
			0x8664E6E5,
			0xBE2B5B58,
			0xBAEA46EF,
			0xB7A96036,
			0xB3687D81,
			0xAD2F2D84,
			0xA9EE3033,
			0xA4AD16EA,
			0xA06C0B5D,
			0xD4326D90,
			0xD0F37027,
			0xDDB056FE,
			0xD9714B49,
			0xC7361B4C,
			0xC3F706FB,
			0xCEB42022,
			0xCA753D95,
			0xF23A8028,
			0xF6FB9D9F,
			0xFBB8BB46,
			0xFF79A6F1,
			0xE13EF6F4,
			0xE5FFEB43,
			0xE8BCCD9A,
			0xEC7DD02D,
			0x34867077,
			0x30476DC0,
			0x3D044B19,
			0x39C556AE,
			0x278206AB,
			0x23431B1C,
			0x2E003DC5,
			0x2AC12072,
			0x128E9DCF,
			0x164F8078,
			0x1B0CA6A1,
			0x1FCDBB16,
			0x18AEB13,
			0x54BF6A4,
			0x808D07D,
			0xCC9CDCA,
			0x7897AB07,
			0x7C56B6B0,
			0x71159069,
			0x75D48DDE,
			0x6B93DDDB,
			0x6F52C06C,
			0x6211E6B5,
			0x66D0FB02,
			0x5E9F46BF,
			0x5A5E5B08,
			0x571D7DD1,
			0x53DC6066,
			0x4D9B3063,
			0x495A2DD4,
			0x44190B0D,
			0x40D816BA,
			0xACA5C697,
			0xA864DB20,
			0xA527FDF9,
			0xA1E6E04E,
			0xBFA1B04B,
			0xBB60ADFC,
			0xB6238B25,
			0xB2E29692,
			0x8AAD2B2F,
			0x8E6C3698,
			0x832F1041,
			0x87EE0DF6,
			0x99A95DF3,
			0x9D684044,
			0x902B669D,
			0x94EA7B2A,
			0xE0B41DE7,
			0xE4750050,
			0xE9362689,
			0xEDF73B3E,
			0xF3B06B3B,
			0xF771768C,
			0xFA325055,
			0xFEF34DE2,
			0xC6BCF05F,
			0xC27DEDE8,
			0xCF3ECB31,
			0xCBFFD686,
			0xD5B88683,
			0xD1799B34,
			0xDC3ABDED,
			0xD8FBA05A,
			0x690CE0EE,
			0x6DCDFD59,
			0x608EDB80,
			0x644FC637,
			0x7A089632,
			0x7EC98B85,
			0x738AAD5C,
			0x774BB0EB,
			0x4F040D56,
			0x4BC510E1,
			0x46863638,
			0x42472B8F,
			0x5C007B8A,
			0x58C1663D,
			0x558240E4,
			0x51435D53,
			0x251D3B9E,
			0x21DC2629,
			0x2C9F00F0,
			0x285E1D47,
			0x36194D42,
			0x32D850F5,
			0x3F9B762C,
			0x3B5A6B9B,
			0x315D626,
			0x7D4CB91,
			0xA97ED48,
			0xE56F0FF,
			0x1011A0FA,
			0x14D0BD4D,
			0x19939B94,
			0x1D528623,
			0xF12F560E,
			0xF5EE4BB9,
			0xF8AD6D60,
			0xFC6C70D7,
			0xE22B20D2,
			0xE6EA3D65,
			0xEBA91BBC,
			0xEF68060B,
			0xD727BBB6,
			0xD3E6A601,
			0xDEA580D8,
			0xDA649D6F,
			0xC423CD6A,
			0xC0E2D0DD,
			0xCDA1F604,
			0xC960EBB3,
			0xBD3E8D7E,
			0xB9FF90C9,
			0xB4BCB610,
			0xB07DABA7,
			0xAE3AFBA2,
			0xAAFBE615,
			0xA7B8C0CC,
			0xA379DD7B,
			0x9B3660C6,
			0x9FF77D71,
			0x92B45BA8,
			0x9675461F,
			0x8832161A,
			0x8CF30BAD,
			0x81B02D74,
			0x857130C3,
			0x5D8A9099,
			0x594B8D2E,
			0x5408ABF7,
			0x50C9B640,
			0x4E8EE645,
			0x4A4FFBF2,
			0x470CDD2B,
			0x43CDC09C,
			0x7B827D21,
			0x7F436096,
			0x7200464F,
			0x76C15BF8,
			0x68860BFD,
			0x6C47164A,
			0x61043093,
			0x65C52D24,
			0x119B4BE9,
			0x155A565E,
			0x18197087,
			0x1CD86D30,
			0x29F3D35,
			0x65E2082,
			0xB1D065B,
			0xFDC1BEC,
			0x3793A651,
			0x3352BBE6,
			0x3E119D3F,
			0x3AD08088,
			0x2497D08D,
			0x2056CD3A,
			0x2D15EBE3,
			0x29D4F654,
			0xC5A92679,
			0xC1683BCE,
			0xCC2B1D17,
			0xC8EA00A0,
			0xD6AD50A5,
			0xD26C4D12,
			0xDF2F6BCB,
			0xDBEE767C,
			0xE3A1CBC1,
			0xE760D676,
			0xEA23F0AF,
			0xEEE2ED18,
			0xF0A5BD1D,
			0xF464A0AA,
			0xF9278673,
			0xFDE69BC4,
			0x89B8FD09,
			0x8D79E0BE,
			0x803AC667,
			0x84FBDBD0,
			0x9ABC8BD5,
			0x9E7D9662,
			0x933EB0BB,
			0x97FFAD0C,
			0xAFB010B1,
			0xAB710D06,
			0xA6322BDF,
			0xA2F33668,
			0xBCB4666D,
			0xB8757BDA,
			0xB5365D03,
			0xB1F740B4
	};
	
	/**生成加密数据相关*/
	private static final int[] ENCODE_DATA_SWAP_TABLE = {
			0x00,
			0x80,
			0x40,
			0xC0,
			0x20,
			0xA0,
			0x60,
			0xE0,
			0x10,
			0x90,
			0x50,
			0xD0,
			0x30,
			0xB0,
			0x70,
			0xF0,
			0x08,
			0x88,
			0x48,
			0xC8,
			0x28,
			0xA8,
			0x68,
			0xE8,
			0x18,
			0x98,
			0x58,
			0xD8,
			0x38,
			0xB8,
			0x78,
			0xF8,
			0x04,
			0x84,
			0x44,
			0xC4,
			0x24,
			0xA4,
			0x64,
			0xE4,
			0x14,
			0x94,
			0x54,
			0xD4,
			0x34,
			0xB4,
			0x74,
			0xF4,
			0x0C,
			0x8C,
			0x4C,
			0xCC,
			0x2C,
			0xAC,
			0x6C,
			0xEC,
			0x1C,
			0x9C,
			0x5C,
			0xDC,
			0x3C,
			0xBC,
			0x7C,
			0xFC,
			0x02,
			0x82,
			0x42,
			0xC2,
			0x22,
			0xA2,
			0x62,
			0xE2,
			0x12,
			0x92,
			0x52,
			0xD2,
			0x32,
			0xB2,
			0x72,
			0xF2,
			0x0A,
			0x8A,
			0x4A,
			0xCA,
			0x2A,
			0xAA,
			0x6A,
			0xEA,
			0x1A,
			0x9A,
			0x5A,
			0xDA,
			0x3A,
			0xBA,
			0x7A,
			0xFA,
			0x06,
			0x86,
			0x46,
			0xC6,
			0x26,
			0xA6,
			0x66,
			0xE6,
			0x16,
			0x96,
			0x56,
			0xD6,
			0x36,
			0xB6,
			0x76,
			0xF6,
			0x0E,
			0x8E,
			0x4E,
			0xCE,
			0x2E,
			0xAE,
			0x6E,
			0xEE,
			0x1E,
			0x9E,
			0x5E,
			0xDE,
			0x3E,
			0xBE,
			0x7E,
			0xFE,
			0x01,
			0x81,
			0x41,
			0xC1,
			0x21,
			0xA1,
			0x61,
			0xE1,
			0x11,
			0x91,
			0x51,
			0xD1,
			0x31,
			0xB1,
			0x71,
			0xF1,
			0x09,
			0x89,
			0x49,
			0xC9,
			0x29,
			0xA9,
			0x69,
			0xE9,
			0x19,
			0x99,
			0x59,
			0xD9,
			0x39,
			0xB9,
			0x79,
			0xF9,
			0x05,
			0x85,
			0x45,
			0xC5,
			0x25,
			0xA5,
			0x65,
			0xE5,
			0x15,
			0x95,
			0x55,
			0xD5,
			0x35,
			0xB5,
			0x75,
			0xF5,
			0x0D,
			0x8D,
			0x4D,
			0xCD,
			0x2D,
			0xAD,
			0x6D,
			0xED,
			0x1D,
			0x9D,
			0x5D,
			0xDD,
			0x3D,
			0xBD,
			0x7D,
			0xFD,
			0x03,
			0x83,
			0x43,
			0xC3,
			0x23,
			0xA3,
			0x63,
			0xE3,
			0x13,
			0x93,
			0x53,
			0xD3,
			0x33,
			0xB3,
			0x73,
			0xF3,
			0x0B,
			0x8B,
			0x4B,
			0xCB,
			0x2B,
			0xAB,
			0x6B,
			0xEB,
			0x1B,
			0x9B,
			0x5B,
			0xDB,
			0x3B,
			0xBB,
			0x7B,
			0xFB,
			0x07,
			0x87,
			0x47,
			0xC7,
			0x27,
			0xA7,
			0x67,
			0xE7,
			0x17,
			0x97,
			0x57,
			0xD7,
			0x37,
			0xB7,
			0x77,
			0xF7,
			0x0F,
			0x8F,
			0x4F,
			0xCF,
			0x2F,
			0xAF,
			0x6F,
			0xEF,
			0x1F,
			0x9F,
			0x5F,
			0xDF,
			0x3F,
			0xBF,
			0x7F,
			0xFF,
	};
	
	 
	 private  byte[] intToBytes(int value) {
		 byte[] result = new byte[4];
		 for(int i=0; i<4; i++) {
			 result[i] = (byte) ((value>>(i*8)) & 0xFF);//小端存储
//			 result[3-i] = (byte) ((value>>(i*8)) & 0xFF);//大端存储
		 }
		 return result;
	 }
	 
	 
	 private  int byteReverse(int value) {
		 int result = 0;
		 for(int i=0; i<4; i++) {
			 result |= (((value>>((i)*8)) & 0xFF) << ((3-i)*8));
		 }
		 return result;
	 }
	 
	 private  int byteReverse(byte value) {
		 int result = 0;
         int h = (value & 0xF0);
		 int l = (value & 0x0F);
		 result = ((l<<4) | (h >> 4)) & 0xFF;
		 return result;
	 }
	 
	 
	 private  byte[] encode_core(byte[] data, byte[] key){
		
		int value;
		int encodeKeyvalue;
		int indexValue;
		int tmp=0;
		int initKeyLen = 256;
		int[] encodeKey = new int[initKeyLen];
		
		/*第一重key初始化*/
		for(int i=0; i<initKeyLen; i++){
			encodeKey[i] =  i;
		}
		
		/*第二重key变换*/
		value = 0;
		for( int i=0; i<initKeyLen; i++ ){
			indexValue = encodeKey[i];
			tmp =  (key[i % key.length] & 0xFF)  + indexValue + value;
			tmp = (tmp % 0x100);
			value = tmp;
			encodeKeyvalue = encodeKey[tmp] ;
			encodeKey[i] =  encodeKeyvalue ;
		}
		byte[] ret = encode_step1(encodeKey, data);
		ret = encode_step2(ret, ENCODE_DATA_SWAP_TABLE);
		return ret;
	}
		
	
	
	private  byte[] encode_step1(int[] keydata, byte[] data) {
		byte[] result = new byte[data.length]; 
		int tmp_D6 = 0,value1, value2_c6, value3_c6,value4_c6,value5_c6,value6_18c, value7_8e;
		for(int i=1; i<=data.length; i++){
			value1 = keydata[i % keydata.length];
			tmp_D6 += value1;
			tmp_D6 = (tmp_D6 % 0x100);
			value2_c6 = keydata[tmp_D6];
			keydata[i] = value2_c6;
			value3_c6 = keydata[i];
			keydata[tmp_D6] = value3_c6;
			value4_c6 = keydata[i];
			value5_c6 = keydata[tmp_D6];
			value6_18c = ((value4_c6 + value5_c6) % 0x100);
			value7_8e = keydata[value6_18c];
			result[i-1] = (byte) (value7_8e ^ (data[i - 1] & 0xFF));
		}
		return result;
	}
	
	
	private  byte[] encode_step2( byte[] data, int[] swapDataArray) {
		
		int value;
		int next;
		int swapIndex;
		int swapData;
		int lastValue;
		byte[] result = new byte[data.length];
		System.arraycopy(data, 0, result, 0, data.length);
		for(int i=0; i<result.length; i++) {
			next = (result[(i + 1)%result.length] & 0xFF);
			value = byteReverse(result[i]);
			swapIndex = ((value ^ next) & 0xFF);
			swapData = swapDataArray[swapIndex];
			swapData = swapData ^ 0xFFFFFFFF;
			lastValue = result.length & 0xFF;
			result[i] = (byte) ((swapData ^ lastValue) & 0xFF);
		}
		
		return result;
	}
	
	private  byte[] leviathan(int timestamp, byte[] data) {
		//原本取malloc出来未初始化的数据的一个字节
		 int randNum =  LeviathanCrypt.randomNumber(0, 0xFF);
		return leviathan(timestamp, data, randNum);
	}
	
	private  byte[] leviathan(int timestamp, byte[] data, int randNum) {
		
		/*最后的结果，26个字节长度的数据*/
		byte[] result = new byte[26];
		
		/*开辟20个字节，用来拼接要加密的数据，然后用来加密*/
		byte[] encodeData = new byte[20];
		
		/*开辟8个字节，用来拼接要加密的数据的key*/
		byte[] key = new byte[8];
		
		/*时间以字节为单位进行反转，然后转乘字节数组*/
		byte[] tsBytes = intToBytes(byteReverse(timestamp));
		
		/*第1步、每隔16个字节就取四个字节*/
		System.arraycopy(data, 0, encodeData, 0, 4);
		System.arraycopy(data, 16, encodeData, 4, 4);
		System.arraycopy(data, 32, encodeData, 8, 4);
		System.arraycopy(data, 48, encodeData, 12, 4);
		
		/*拼接时间反转后的数据*/
		System.arraycopy(tsBytes, 0, encodeData, 16, 4);
		
		
		/**第2步、拼接生成加密数据的key*/
		 byte[] keyValueBytes = intToBytes(ENCODE_KEY_SWAP_TABLE[randNum & 0xFF]);
		 int ADKey = ENCODE_KEY_SWAP_TABLE[0xAD];
		 int DBKey = ENCODE_KEY_SWAP_TABLE[0xDB];
		 byte[] seKeyValueBytes = intToBytes(ADKey ^ DBKey);
		 key[0] = seKeyValueBytes[0];
		 key[1] = 0;
		 key[2] = seKeyValueBytes[1];
		 key[3] = keyValueBytes[1];
		 key[4] = seKeyValueBytes[2];
		 key[5] = seKeyValueBytes[3];
		 key[6] = 0;
		 key[7] = keyValueBytes[0];
		 
		 /**第3步、开始加密20个字节数据*/
		 byte[] recodeRet = encode_core(encodeData, key);
		 
		 /**第4步、拼接最后的数据*/
		 /*拼接头部的6个字节*/
		 result[0] = 0x03;
		 result[1] = (byte) (randNum & 0xFF);
		 result[2] = keyValueBytes[0];
		 result[3] = keyValueBytes[1];
		 result[4] = 0;
		 result[5] = 0;
		 
		 /*拼接加密后的数据*/
		 System.arraycopy(recodeRet, 0, result, 6, recodeRet.length);
		 
		return result;
	}
	
	 
	private  String format_url(String url) {
	      int start = url.indexOf("?");
	      int end = url.indexOf("#");
	      return start == -1?null:(end == -1?url.substring(start + 1):(end < start?null:url.substring(start + 1, end)));
	   }
		
	 
	 private  boolean isEmpty(String str){
			if(str == null || str.length() == 0)
				return true;
			else
				return false;
		}
		
	 private  byte[] md5(byte[] data){
			byte[] ret = null;
			MessageDigest digest;
			try {
				digest = MessageDigest.getInstance("MD5");
				ret = digest.digest(data);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return ret;
		}
		
		private  String getMD5(String str){
			byte[] md5byte = this.md5(str.getBytes());
			return this.bytesToHex(md5byte);
		}
		
	 
	 private   String bytesToHex(byte[] data) {
		        final char hexArray[] = "0123456789ABCDEF".toCharArray();
		        char[] hexChars = new char[data.length * 2];
		        for ( int j = 0; j < data.length; j++ ) {
		            int v = data[j] & 0xFF;
		            hexChars[j * 2] = hexArray[v >>> 4];
		            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
		        }
		        return new String(hexChars);
		    }
		
		private  byte[] hexStringToBytes(String hexString) {
	        if (hexString == null || hexString.equals("")) {
	            return null;
	        }
	        hexString = hexString.toUpperCase();
	        int length = hexString.length() / 2;
	        char[] hexChars = hexString.toCharArray();
	        byte[] d = new byte[length];
	        for (int i = 0; i < length; i++) {
	            int pos = i * 2;
	            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
	            
	        }
	        return d;
	    }
		
		private  byte charToByte(char c) {
	        return (byte) "0123456789ABCDEF".indexOf(c);
	    }
		
	 /**dou音请求的签名*/
		public  String buildSig(int timstamp, String url, String _X_SS_STUB, String cookies, String sessionId) {
			String _X_SS_STUBMd5;
			String cookiesmd5;
			String sessionIdMd5;
			String urlmd5 = this.getMD5(format_url(url));
			
			if(isEmpty(_X_SS_STUB)) {
				_X_SS_STUBMd5 = "00000000000000000000000000000000";
			}else {
				_X_SS_STUBMd5 = this.getMD5(_X_SS_STUB);
			}
			if(this.isEmpty(cookies)) {
				cookiesmd5 = "00000000000000000000000000000000";
			}else {
				cookiesmd5 = this.getMD5(cookies);
			}
			if(this.isEmpty(sessionId)) {
				sessionIdMd5 = "00000000000000000000000000000000";
			}else {
				sessionIdMd5 = this.getMD5(sessionId);
			}
	        StringBuilder sb_Gorgon = new StringBuilder();
	        sb_Gorgon.append(urlmd5);
	        sb_Gorgon.append(_X_SS_STUBMd5);
	        sb_Gorgon.append(cookiesmd5);
	        sb_Gorgon.append(sessionIdMd5);
	        byte[] data = this.hexStringToBytes(sb_Gorgon.toString());
	        byte[] ret = this.leviathan(timstamp, data);
			String result = this.bytesToHex(ret).toLowerCase();
			return result;
		}
		
	    private static int randomNumber(int mini, int max) {
	    	Random ran = new Random();
	    	if(mini < 0 || max <= mini) {
	    		throw new RuntimeException(String.format("param error:mini = %d, max = %d", mini, max));
	    	}
	    	return mini + ran.nextInt(max - mini);
	    }
	    
	
}
